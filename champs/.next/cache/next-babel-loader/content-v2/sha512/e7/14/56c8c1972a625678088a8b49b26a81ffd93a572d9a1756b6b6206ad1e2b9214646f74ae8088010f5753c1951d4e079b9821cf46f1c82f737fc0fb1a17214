{"ast":null,"code":"function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nexport var convertChampList = function convertChampList(champions) {\n  var champData = champions.data;\n  var array = [];\n\n  for (var name in champData) {\n    var champ = champData[name];\n    var id = champ.key;\n    array[id] = champ;\n  }\n\n  return array;\n};\nexport var getPosition = function getPosition(role, lane) {\n  console.log(\"getPosition\", role, lane);\n\n  if (role == \"DUO_SUPPORT\") {\n    return \"Support\";\n  }\n\n  ;\n\n  if (role == \"DUO_CARRY\") {\n    return \"ADC\";\n  }\n\n  switch (lane) {\n    case \"MID\":\n      return \"Mid\";\n\n    case \"MIDDLE\":\n      return \"Mid\";\n\n    case \"TOP\":\n      return \"Top\";\n\n    case \"JUNGLE\":\n      return \"JUNGLE \";\n\n    case \"BOTTOM\":\n      if (role == \"DUO_SUPPORT\") {\n        return \"Support\";\n      } else if (role = \"DUO_CARRY\") {\n        return \"Bottom\";\n      }\n\n      return \"Bottom-lane\";\n\n    case \"NONE\":\n      return \"Support\";\n\n    default:\n      return \"Unknown\";\n  }\n};\nexport var getType = function getType(type) {\n  switch (type) {\n    case 400:\n      return \"Draft Pick\";\n\n    case 420:\n      return \"Ranked solo\";\n\n    case 430:\n      return \"Blind Pick\";\n\n    case 440:\n      return \"Ranked flex\";\n\n    case 450:\n      return \"ARAM\";\n\n    case 700:\n      return \"Clash games\";\n\n    case 830:\n      return \"Co-op vs. AI Intro Bot\";\n\n    case 840:\n      return \"Co-op vs. AI Beginner Bot\";\n\n    case 850:\n      return \"Co-op vs. AI Intermediate Bot\";\n\n    case 900:\n      return \"URF\";\n\n    case 1300:\n      return \"Nexus Blitz\";\n\n    default:\n      return \"Unknown\";\n  }\n};\nexport var convertTimelineList = function convertTimelineList(list) {\n  var interval = 10; //seconds\n\n  console.log(\"\\n\\n---- convertTimelineList ----\");\n  console.log(\"list:\", list);\n\n  var _iterator = _createForOfIteratorHelper(list),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var item = _step.value;\n      console.log(\"item\", item);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n};","map":{"version":3,"sources":["C:/Users/moren/OneDrive/Documenten/League of Legends/Coding/LOL-API/methods/league_methods.js"],"names":["convertChampList","champions","champData","data","array","name","champ","id","key","getPosition","role","lane","console","log","getType","type","convertTimelineList","list","interval","item"],"mappings":";;;;;;AAAA,OAAO,IAAMA,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,SAAD,EAAe;AAC3C,MAAMC,SAAS,GAAGD,SAAS,CAACE,IAA5B;AACA,MAAIC,KAAK,GAAG,EAAZ;;AACA,OAAK,IAAMC,IAAX,IAAmBH,SAAnB,EAA8B;AAC1B,QAAMI,KAAK,GAAGJ,SAAS,CAACG,IAAD,CAAvB;AACA,QAAME,EAAE,GAAGD,KAAK,CAACE,GAAjB;AACAJ,IAAAA,KAAK,CAACG,EAAD,CAAL,GAAYD,KAAZ;AACH;;AACD,SAAOF,KAAP;AACH,CATM;AAWP,OAAO,IAAMK,WAAW,GAAG,SAAdA,WAAc,CAACC,IAAD,EAAOC,IAAP,EAAgB;AACvCC,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BH,IAA3B,EAAiCC,IAAjC;;AACA,MAAID,IAAI,IAAI,aAAZ,EAA2B;AACvB,WAAO,SAAP;AACH;;AAAA;;AACD,MAAIA,IAAI,IAAI,WAAZ,EAAyB;AACrB,WAAO,KAAP;AACH;;AACD,UAAQC,IAAR;AACI,SAAK,KAAL;AACI,aAAO,KAAP;;AACJ,SAAK,QAAL;AACI,aAAO,KAAP;;AACJ,SAAK,KAAL;AACI,aAAO,KAAP;;AACJ,SAAK,QAAL;AACI,aAAO,SAAP;;AACJ,SAAK,QAAL;AACI,UAAID,IAAI,IAAI,aAAZ,EAA2B;AACvB,eAAO,SAAP;AACH,OAFD,MAGK,IAAIA,IAAI,GAAG,WAAX,EAAwB;AACzB,eAAO,QAAP;AACH;;AACD,aAAO,aAAP;;AACJ,SAAK,MAAL;AACI,aAAO,SAAP;;AACJ;AAAS,aAAO,SAAP;AAnBb;AAsBH,CA9BM;AA+BP,OAAO,IAAMI,OAAO,GAAG,SAAVA,OAAU,CAACC,IAAD,EAAU;AAE7B,UAAQA,IAAR;AACI,SAAK,GAAL;AACI,aAAO,YAAP;;AACJ,SAAK,GAAL;AACI,aAAO,aAAP;;AACJ,SAAK,GAAL;AACI,aAAO,YAAP;;AACJ,SAAK,GAAL;AACI,aAAO,aAAP;;AACJ,SAAK,GAAL;AACI,aAAO,MAAP;;AACJ,SAAK,GAAL;AACI,aAAO,aAAP;;AACJ,SAAK,GAAL;AACI,aAAO,wBAAP;;AACJ,SAAK,GAAL;AACI,aAAO,2BAAP;;AACJ,SAAK,GAAL;AACI,aAAO,+BAAP;;AACJ,SAAK,GAAL;AACI,aAAO,KAAP;;AACJ,SAAK,IAAL;AACI,aAAO,aAAP;;AAIJ;AAAS,aAAO,SAAP;AA1Bb;AA6BH,CA/BM;AAiCP,OAAO,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,IAAD,EAAU;AACzC,MAAMC,QAAQ,GAAG,EAAjB,CADyC,CACrB;;AACpBN,EAAAA,OAAO,CAACC,GAAR,CAAY,mCAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBI,IAArB;;AAHyC,6CAItBA,IAJsB;AAAA;;AAAA;AAIzC,wDAAyB;AAAA,UAAdE,IAAc;AACrBP,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBM,IAApB;AACH;AANwC;AAAA;AAAA;AAAA;AAAA;AAQ5C,CARM","sourcesContent":["export const convertChampList = (champions) => {\r\n    const champData = champions.data;\r\n    let array = []\r\n    for (const name in champData) {\r\n        const champ = champData[name];\r\n        const id = champ.key;\r\n        array[id] = champ;\r\n    }\r\n    return array;\r\n}\r\n\r\nexport const getPosition = (role, lane) => {\r\n    console.log(\"getPosition\", role, lane)\r\n    if (role == \"DUO_SUPPORT\") {\r\n        return \"Support\";\r\n    };\r\n    if (role == \"DUO_CARRY\") {\r\n        return \"ADC\";\r\n    }\r\n    switch (lane) {\r\n        case \"MID\":\r\n            return \"Mid\";\r\n        case \"MIDDLE\":\r\n            return \"Mid\";\r\n        case \"TOP\":\r\n            return \"Top\";\r\n        case \"JUNGLE\":\r\n            return \"JUNGLE \"\r\n        case \"BOTTOM\":\r\n            if (role == \"DUO_SUPPORT\") {\r\n                return \"Support\";\r\n            }\r\n            else if (role = \"DUO_CARRY\") {\r\n                return \"Bottom\"\r\n            }\r\n            return \"Bottom-lane\";\r\n        case \"NONE\":\r\n            return \"Support\";\r\n        default: return \"Unknown\";\r\n\r\n    }\r\n}\r\nexport const getType = (type) => {\r\n\r\n    switch (type) {\r\n        case 400:\r\n            return \"Draft Pick\";\r\n        case 420:\r\n            return \"Ranked solo\";\r\n        case 430:\r\n            return \"Blind Pick\";\r\n        case 440:\r\n            return \"Ranked flex\";\r\n        case 450:\r\n            return \"ARAM\";\r\n        case 700:\r\n            return \"Clash games\";\r\n        case 830:\r\n            return \"Co-op vs. AI Intro Bot\";\r\n        case 840:\r\n            return \"Co-op vs. AI Beginner Bot\";\r\n        case 850:\r\n            return \"Co-op vs. AI Intermediate Bot\";\r\n        case 900:\r\n            return \"URF\";\r\n        case 1300:\r\n            return \"Nexus Blitz\";\r\n\r\n\r\n\r\n        default: return \"Unknown\";\r\n\r\n    }\r\n}\r\n\r\nexport const convertTimelineList = (list) => {\r\n    const interval = 10;//seconds\r\n    console.log(\"\\n\\n---- convertTimelineList ----\");\r\n    console.log(\"list:\", list);\r\n    for (const item of list) {\r\n        console.log(\"item\", item);\r\n    }\r\n\r\n}"]},"metadata":{},"sourceType":"module"}