{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\moren\\\\OneDrive\\\\Documenten\\\\League of Legends\\\\Coding\\\\LOL-API\\\\pages\\\\testapi.js\";\nimport { useEffect, useState } from \"react\";\nimport { Kayn, REGIONS } from 'kayn';\nimport { riotAPIKey } from \"../constants/constants\";\n\nconst testApi = ({\n  result\n}) => {\n  const refreshWithMethod = query => {\n    console.log(\"refresh with query\", query);\n    window.location.href = window.location.protocol + \"//\" + window.location.host + window.location.pathname + '?method=' + query;\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"user_data\",\n      onClick: () => {\n        () => {\n          refreshWithMethod(\"user\");\n        };\n      },\n      children: \"Get user data \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 9\n    }, this), result && /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: JSON.stringify(result, null, 2)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 20\n    }, this)]\n  }, void 0, true);\n};\n\nexport default testApi;\n\nconst getUserData = api => {\n  if (api) {\n    api.Summoner.by.name(\"MlDget\").then(result => {\n      setResult(result);\n    });\n  }\n};\n\nexport async function getServerSideProps({\n  query\n}) {\n  const method = query.method;\n  let result = null;\n  const kayn = Kayn(riotAPIKey)({\n    region: REGIONS.EUROPE_WEST,\n    debugOptions: {\n      isEnabled: true,\n      showKey: false\n    }\n  });\n\n  if (method) {\n    switch (method) {\n      case \"user\":\n        result = getUserData(kayn);\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  return {\n    props: {\n      result\n    } // will be passed to the page component as props\n\n  };\n}","map":{"version":3,"sources":["C:/Users/moren/OneDrive/Documenten/League of Legends/Coding/LOL-API/pages/testapi.js"],"names":["useEffect","useState","Kayn","REGIONS","riotAPIKey","testApi","result","refreshWithMethod","query","console","log","window","location","href","protocol","host","pathname","JSON","stringify","getUserData","api","Summoner","by","name","then","setResult","getServerSideProps","method","kayn","region","EUROPE_WEST","debugOptions","isEnabled","showKey","props"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,IAAT,EAAeC,OAAf,QAA8B,MAA9B;AACA,SAASC,UAAT,QAA2B,wBAA3B;;AAEA,MAAMC,OAAO,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAgB;AAC5B,QAAMC,iBAAiB,GAAIC,KAAD,IAAW;AACjCC,IAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCF,KAAlC;AACAG,IAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuBF,MAAM,CAACC,QAAP,CAAgBE,QAAhB,GAA2B,IAA3B,GAAkCH,MAAM,CAACC,QAAP,CAAgBG,IAAlD,GAAyDJ,MAAM,CAACC,QAAP,CAAgBI,QAAzE,GAAoF,UAApF,GAAiGR,KAAxH;AAEH,GAJD;;AAKA,sBAAO;AAAA,4BAEH;AAAQ,MAAA,SAAS,EAAC,WAAlB;AAA8B,MAAA,OAAO,EAAE,MAAM;AACzC,cAAM;AACFD,UAAAA,iBAAiB,CAAC,MAAD,CAAjB;AACH,SAFD;AAGH,OAJD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFG,EAQFD,MAAM,iBAAI;AAAA,gBAAMW,IAAI,CAACC,SAAL,CAAeZ,MAAf,EAAuB,IAAvB,EAA6B,CAA7B;AAAN;AAAA;AAAA;AAAA;AAAA,YARR;AAAA,kBAAP;AAWH,CAjBD;;AAkBA,eAAeD,OAAf;;AACA,MAAMc,WAAW,GAAIC,GAAD,IAAS;AACzB,MAAIA,GAAJ,EAAS;AACLA,IAAAA,GAAG,CAACC,QAAJ,CAAaC,EAAb,CAAgBC,IAAhB,CAAqB,QAArB,EAA+BC,IAA/B,CAAqClB,MAAD,IAAY;AAC5CmB,MAAAA,SAAS,CAACnB,MAAD,CAAT;AACH,KAFD;AAGH;AAEJ,CAPD;;AAQA,OAAO,eAAeoB,kBAAf,CAAkC;AAAElB,EAAAA;AAAF,CAAlC,EAA6C;AAChD,QAAMmB,MAAM,GAAGnB,KAAK,CAACmB,MAArB;AACA,MAAIrB,MAAM,GAAG,IAAb;AACA,QAAMsB,IAAI,GAAG1B,IAAI,CAACE,UAAD,CAAJ,CAAiB;AAC1ByB,IAAAA,MAAM,EAAE1B,OAAO,CAAC2B,WADU;AAE1BC,IAAAA,YAAY,EAAE;AACVC,MAAAA,SAAS,EAAE,IADD;AAEVC,MAAAA,OAAO,EAAE;AAFC;AAFY,GAAjB,CAAb;;AAQA,MAAIN,MAAJ,EAAY;AACR,YAAQA,MAAR;AACI,WAAK,MAAL;AACIrB,QAAAA,MAAM,GAAGa,WAAW,CAACS,IAAD,CAApB;AACA;;AACJ;AACI;AALR;AAOH;;AACD,SAAO;AACHM,IAAAA,KAAK,EAAE;AAAE5B,MAAAA;AAAF,KADJ,CACgB;;AADhB,GAAP;AAGH","sourcesContent":["import { useEffect, useState } from \"react\"\r\nimport { Kayn, REGIONS } from 'kayn'\r\nimport { riotAPIKey } from \"../constants/constants\";\r\n\r\nconst testApi = ({ result }) => {\r\n    const refreshWithMethod = (query) => {\r\n        console.log(\"refresh with query\", query)\r\n        window.location.href = window.location.protocol + \"//\" + window.location.host + window.location.pathname + '?method=' + query;\r\n\r\n    }\r\n    return <>\r\n\r\n        <button className=\"user_data\" onClick={() => {\r\n            () => {\r\n                refreshWithMethod(\"user\");\r\n            }\r\n        }}>Get user data </button>\r\n\r\n        {result && <pre>{JSON.stringify(result, null, 2)}</pre>}\r\n\r\n    </>\r\n}\r\nexport default testApi\r\nconst getUserData = (api) => {\r\n    if (api) {\r\n        api.Summoner.by.name(\"MlDget\").then((result) => {\r\n            setResult(result);\r\n        });\r\n    }\r\n\r\n}\r\nexport async function getServerSideProps({ query }) {\r\n    const method = query.method;\r\n    let result = null;\r\n    const kayn = Kayn(riotAPIKey)({\r\n        region: REGIONS.EUROPE_WEST,\r\n        debugOptions: {\r\n            isEnabled: true,\r\n            showKey: false,\r\n        },\r\n\r\n    })\r\n    if (method) {\r\n        switch (method) {\r\n            case \"user\":\r\n                result = getUserData(kayn);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    return {\r\n        props: { result }, // will be passed to the page component as props\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}