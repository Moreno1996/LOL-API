{"ast":null,"code":"import { msToDate, msToTime } from \"./general_methods\";\nexport const convertChampList = champions => {\n  const champData = champions.data;\n  let array = [];\n\n  for (const name in champData) {\n    const champ = champData[name];\n    const id = champ.key;\n    array[id] = champ;\n  }\n\n  return array;\n};\nexport const getPosition = (role, lane) => {\n  if (role == \"DUO_SUPPORT\") {\n    return \"Support\";\n  }\n\n  if (role == \"DUO_CARRY\") {\n    return \"ADC\";\n  }\n\n  switch (lane) {\n    case \"MID\":\n      return \"Mid\";\n\n    case \"MIDDLE\":\n      return \"Mid\";\n\n    case \"TOP\":\n      return \"Top\";\n\n    case \"JUNGLE\":\n      return \"JUNGLE \";\n\n    case \"BOTTOM\":\n      if (role == \"DUO_SUPPORT\") {\n        return \"Support\";\n      } else if (role = \"DUO_CARRY\") {\n        return \"Bottom\";\n      }\n\n      return \"Bottom-lane\";\n\n    case \"NONE\":\n      return \"Support\";\n\n    default:\n      return \"Unknown\";\n  }\n};\nexport const getType = type => {\n  switch (type) {\n    case 400:\n      return \"Draft Pick\";\n\n    case 420:\n      return \"Ranked solo\";\n\n    case 430:\n      return \"Blind Pick\";\n\n    case 440:\n      return \"Ranked flex\";\n\n    case 450:\n      return \"ARAM\";\n\n    case 700:\n      return \"Clash games\";\n\n    case 830:\n      return \"Co-op vs. AI Intro Bot\";\n\n    case 840:\n      return \"Co-op vs. AI Beginner Bot\";\n\n    case 850:\n      return \"Co-op vs. AI Intermediate Bot\";\n\n    case 900:\n      return \"URF\";\n\n    case 1300:\n      return \"Nexus Blitz\";\n\n    default:\n      return \"Unknown\";\n  }\n};\nexport const convertTimelineList = list => {\n  const interval = 3; //seconds\n\n  const msInterval = interval * 1000;\n  let result = [];\n\n  for (const i in list) {\n    const index = parseInt(i);\n\n    if (index != list.length - 1) {\n      const currentItem = list[index];\n      const nextItem = list[index + 1];\n      const startTime = parseInt(currentItem.timestamp);\n      const endTime = parseInt(nextItem.timestamp);\n      const iterations = Math.floor((endTime - startTime) / msInterval);\n      const difX = parseInt(nextItem.position.x) - parseInt(currentItem.position.x);\n      const difY = parseInt(nextItem.position.y) - parseInt(currentItem.position.y);\n\n      for (let a = 0; a < iterations; a++) {\n        const timestamp = Math.floor(startTime / msInterval) * msInterval + a * msInterval;\n        const position = {\n          x: parseInt(currentItem.position.x) + difX / iterations * a,\n          y: parseInt(currentItem.position.y) + difY / iterations * a\n        };\n        const time = msToTime(timestamp);\n\n        if (timestamp % msInterval == 0) {\n          result.push({\n            timestamp,\n            position,\n            time\n          });\n        }\n      }\n    }\n  }\n\n  return result;\n};","map":{"version":3,"sources":["C:/Users/moren/Bureaublad/Coding/LOL-API/site/methods/league_methods.js"],"names":["msToDate","msToTime","convertChampList","champions","champData","data","array","name","champ","id","key","getPosition","role","lane","getType","type","convertTimelineList","list","interval","msInterval","result","i","index","parseInt","length","currentItem","nextItem","startTime","timestamp","endTime","iterations","Math","floor","difX","position","x","difY","y","a","time","push"],"mappings":"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","sourcesContent":["import { msToDate, msToTime } from \"./general_methods\";\r\n\r\nexport const convertChampList = (champions) => {\r\n  const champData = champions.data;\r\n  let array = [];\r\n  for (const name in champData) {\r\n    const champ = champData[name];\r\n    const id = champ.key;\r\n    array[id] = champ;\r\n  }\r\n  return array;\r\n};\r\n\r\nexport const getPosition = (role, lane) => {\r\n  if (role == \"DUO_SUPPORT\") {\r\n    return \"Support\";\r\n  }\r\n  if (role == \"DUO_CARRY\") {\r\n    return \"ADC\";\r\n  }\r\n  switch (lane) {\r\n    case \"MID\":\r\n      return \"Mid\";\r\n    case \"MIDDLE\":\r\n      return \"Mid\";\r\n    case \"TOP\":\r\n      return \"Top\";\r\n    case \"JUNGLE\":\r\n      return \"JUNGLE \";\r\n    case \"BOTTOM\":\r\n      if (role == \"DUO_SUPPORT\") {\r\n        return \"Support\";\r\n      } else if ((role = \"DUO_CARRY\")) {\r\n        return \"Bottom\";\r\n      }\r\n      return \"Bottom-lane\";\r\n    case \"NONE\":\r\n      return \"Support\";\r\n    default:\r\n      return \"Unknown\";\r\n  }\r\n};\r\nexport const getType = (type) => {\r\n  switch (type) {\r\n    case 400:\r\n      return \"Draft Pick\";\r\n    case 420:\r\n      return \"Ranked solo\";\r\n    case 430:\r\n      return \"Blind Pick\";\r\n    case 440:\r\n      return \"Ranked flex\";\r\n    case 450:\r\n      return \"ARAM\";\r\n    case 700:\r\n      return \"Clash games\";\r\n    case 830:\r\n      return \"Co-op vs. AI Intro Bot\";\r\n    case 840:\r\n      return \"Co-op vs. AI Beginner Bot\";\r\n    case 850:\r\n      return \"Co-op vs. AI Intermediate Bot\";\r\n    case 900:\r\n      return \"URF\";\r\n    case 1300:\r\n      return \"Nexus Blitz\";\r\n\r\n    default:\r\n      return \"Unknown\";\r\n  }\r\n};\r\n\r\nexport const convertTimelineList = (list) => {\r\n  const interval = 3; //seconds\r\n  const msInterval = interval * 1000;\r\n  let result = [];\r\n  for (const i in list) {\r\n    const index = parseInt(i);\r\n    if (index != list.length - 1) {\r\n      const currentItem = list[index];\r\n      const nextItem = list[index + 1];\r\n      const startTime = parseInt(currentItem.timestamp);\r\n      const endTime = parseInt(nextItem.timestamp);\r\n      const iterations = Math.floor((endTime - startTime) / msInterval);\r\n      const difX =\r\n        parseInt(nextItem.position.x) - parseInt(currentItem.position.x);\r\n      const difY =\r\n        parseInt(nextItem.position.y) - parseInt(currentItem.position.y);\r\n      for (let a = 0; a < iterations; a++) {\r\n        const timestamp =\r\n          Math.floor(startTime / msInterval) * msInterval + a * msInterval;\r\n        const position = {\r\n          x: parseInt(currentItem.position.x) + (difX / iterations) * a,\r\n          y: parseInt(currentItem.position.y) + (difY / iterations) * a,\r\n        };\r\n        const time = msToTime(timestamp);\r\n\r\n        if (timestamp % msInterval == 0) {\r\n          result.push({\r\n            timestamp,\r\n            position,\r\n            time,\r\n          });\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return result;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}