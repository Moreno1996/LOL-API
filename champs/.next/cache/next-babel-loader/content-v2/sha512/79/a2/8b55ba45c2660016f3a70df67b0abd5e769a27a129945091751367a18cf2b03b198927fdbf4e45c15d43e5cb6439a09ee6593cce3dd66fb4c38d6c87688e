{"ast":null,"code":"function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { msToDate, msToTime } from \"./general_methods\";\nexport var convertChampList = function convertChampList(champions) {\n  var champData = champions.data;\n  var array = [];\n\n  var _iterator = _createForOfIteratorHelper(champData),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var champ = _step.value;\n      var id = champ.key;\n      array[id] = champ;\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return array;\n};\nexport var getPosition = function getPosition(role, lane) {\n  if (role == \"DUO_SUPPORT\") {\n    return \"Support\";\n  }\n\n  if (role == \"DUO_CARRY\") {\n    return \"ADC\";\n  }\n\n  switch (lane) {\n    case \"MID\":\n      return \"Mid\";\n\n    case \"MIDDLE\":\n      return \"Mid\";\n\n    case \"TOP\":\n      return \"Top\";\n\n    case \"JUNGLE\":\n      return \"JUNGLE \";\n\n    case \"BOTTOM\":\n      if (role == \"DUO_SUPPORT\") {\n        return \"Support\";\n      } else if (role = \"DUO_CARRY\") {\n        return \"Bottom\";\n      }\n\n      return \"Bottom-lane\";\n\n    case \"NONE\":\n      return \"Support\";\n\n    default:\n      return \"Unknown\";\n  }\n};\nexport var getType = function getType(type) {\n  switch (type) {\n    case 400:\n      return \"Draft Pick\";\n\n    case 420:\n      return \"Ranked solo\";\n\n    case 430:\n      return \"Blind Pick\";\n\n    case 440:\n      return \"Ranked flex\";\n\n    case 450:\n      return \"ARAM\";\n\n    case 700:\n      return \"Clash games\";\n\n    case 830:\n      return \"Co-op vs. AI Intro Bot\";\n\n    case 840:\n      return \"Co-op vs. AI Beginner Bot\";\n\n    case 850:\n      return \"Co-op vs. AI Intermediate Bot\";\n\n    case 900:\n      return \"URF\";\n\n    case 1300:\n      return \"Nexus Blitz\";\n\n    default:\n      return \"Unknown\";\n  }\n};\nexport var convertTimelineList = function convertTimelineList(list) {\n  var interval = 3; //seconds\n\n  var msInterval = interval * 1000;\n  var result = [];\n\n  for (var i in list) {\n    var index = parseInt(i);\n\n    if (index != list.length - 1) {\n      var currentItem = list[index];\n      var nextItem = list[index + 1];\n      var startTime = parseInt(currentItem.timestamp);\n      var endTime = parseInt(nextItem.timestamp);\n      var iterations = Math.floor((endTime - startTime) / msInterval);\n      var difX = parseInt(nextItem.position.x) - parseInt(currentItem.position.x);\n      var difY = parseInt(nextItem.position.y) - parseInt(currentItem.position.y);\n\n      for (var a = 0; a < iterations; a++) {\n        var timestamp = Math.floor(startTime / msInterval) * msInterval + a * msInterval;\n        var position = {\n          x: parseInt(currentItem.position.x) + difX / iterations * a,\n          y: parseInt(currentItem.position.y) + difY / iterations * a\n        };\n        var time = msToTime(timestamp);\n\n        if (timestamp % msInterval == 0) {\n          result.push({\n            timestamp: timestamp,\n            position: position,\n            time: time\n          });\n        }\n      }\n    }\n  }\n\n  return result;\n};","map":{"version":3,"sources":["C:/Users/moren/Bureaublad/Coding/LOL-API/site/methods/league_methods.js"],"names":["msToDate","msToTime","convertChampList","champions","champData","data","array","champ","id","key","getPosition","role","lane","getType","type","convertTimelineList","list","interval","msInterval","result","i","index","parseInt","length","currentItem","nextItem","startTime","timestamp","endTime","iterations","Math","floor","difX","position","x","difY","y","a","time","push"],"mappings":"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","sourcesContent":["import { msToDate, msToTime } from \"./general_methods\";\r\n\r\nexport const convertChampList = (champions) => {\r\n  const champData = champions.data;\r\n  let array = [];\r\n  for (const champ of champData) {\r\n    const id = champ.key;\r\n    array[id] = champ;\r\n  }\r\n  return array;\r\n};\r\n\r\nexport const getPosition = (role, lane) => {\r\n  if (role == \"DUO_SUPPORT\") {\r\n    return \"Support\";\r\n  }\r\n  if (role == \"DUO_CARRY\") {\r\n    return \"ADC\";\r\n  }\r\n  switch (lane) {\r\n    case \"MID\":\r\n      return \"Mid\";\r\n    case \"MIDDLE\":\r\n      return \"Mid\";\r\n    case \"TOP\":\r\n      return \"Top\";\r\n    case \"JUNGLE\":\r\n      return \"JUNGLE \";\r\n    case \"BOTTOM\":\r\n      if (role == \"DUO_SUPPORT\") {\r\n        return \"Support\";\r\n      } else if ((role = \"DUO_CARRY\")) {\r\n        return \"Bottom\";\r\n      }\r\n      return \"Bottom-lane\";\r\n    case \"NONE\":\r\n      return \"Support\";\r\n    default:\r\n      return \"Unknown\";\r\n  }\r\n};\r\nexport const getType = (type) => {\r\n  switch (type) {\r\n    case 400:\r\n      return \"Draft Pick\";\r\n    case 420:\r\n      return \"Ranked solo\";\r\n    case 430:\r\n      return \"Blind Pick\";\r\n    case 440:\r\n      return \"Ranked flex\";\r\n    case 450:\r\n      return \"ARAM\";\r\n    case 700:\r\n      return \"Clash games\";\r\n    case 830:\r\n      return \"Co-op vs. AI Intro Bot\";\r\n    case 840:\r\n      return \"Co-op vs. AI Beginner Bot\";\r\n    case 850:\r\n      return \"Co-op vs. AI Intermediate Bot\";\r\n    case 900:\r\n      return \"URF\";\r\n    case 1300:\r\n      return \"Nexus Blitz\";\r\n\r\n    default:\r\n      return \"Unknown\";\r\n  }\r\n};\r\n\r\nexport const convertTimelineList = (list) => {\r\n  const interval = 3; //seconds\r\n  const msInterval = interval * 1000;\r\n  let result = [];\r\n  for (const i in list) {\r\n    const index = parseInt(i);\r\n    if (index != list.length - 1) {\r\n      const currentItem = list[index];\r\n      const nextItem = list[index + 1];\r\n      const startTime = parseInt(currentItem.timestamp);\r\n      const endTime = parseInt(nextItem.timestamp);\r\n      const iterations = Math.floor((endTime - startTime) / msInterval);\r\n      const difX =\r\n        parseInt(nextItem.position.x) - parseInt(currentItem.position.x);\r\n      const difY =\r\n        parseInt(nextItem.position.y) - parseInt(currentItem.position.y);\r\n      for (let a = 0; a < iterations; a++) {\r\n        const timestamp =\r\n          Math.floor(startTime / msInterval) * msInterval + a * msInterval;\r\n        const position = {\r\n          x: parseInt(currentItem.position.x) + (difX / iterations) * a,\r\n          y: parseInt(currentItem.position.y) + (difY / iterations) * a,\r\n        };\r\n        const time = msToTime(timestamp);\r\n\r\n        if (timestamp % msInterval == 0) {\r\n          result.push({\r\n            timestamp,\r\n            position,\r\n            time,\r\n          });\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return result;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}